# .github/workflows/ci-cd.yml
name: Supabase CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # ========================================
  # VALIDATION & LINT
  # ========================================
  validate:
    name: Validate SQL & Lint
    runs-on: ubuntu-latest
    if: >
      contains(github.event.head_commit.modified, 'supabase/migrations/') ||
      contains(github.event.head_commit.modified, 'supabase/functions/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli

      - name: Validate SQL syntax
        run: |
          # Lint des migrations
          if [ -d "supabase/migrations" ]; then
            supabase db lint --schema public
          fi

  # ========================================
  # TESTS UNITAIRES (pgTAP)
  # ========================================
  test-database:
    name: Database Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: supabase/postgres:15.1.0.147
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli

      - name: Setup local Supabase
        run: |
          supabase init
          supabase start --db-url postgresql://postgres:postgres@localhost:5432/postgres

      - name: Run database migrations
        run: supabase db reset --db-url postgresql://postgres:postgres@localhost:5432/postgres

      - name: Run pgTAP tests
        run: |
          if [ -d "supabase/tests" ]; then
            for test_file in supabase/tests/*.sql; do
              echo "Running test: $test_file"
              supabase test db --db-url postgresql://postgres:postgres@localhost:5432/postgres "$test_file"
            done
          fi

  # ========================================
  # TESTS EDGE FUNCTIONS
  # ========================================
  test-functions:
    name: Edge Functions Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'supabase/functions/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli

      - name: Start Supabase locally
        run: |
          supabase start
          supabase functions serve &
          sleep 15

      - name: Test functions health
        run: |
          # Test basique de santé des functions
          curl -f http://localhost:54321/functions/v1/health || echo "No health endpoint yet"

  # ========================================
  # DÉPLOIEMENT STAGING
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, test-database]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://${{ secrets.SUPABASE_PROJECT_ID }}.supabase.co
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli

      - name: Deploy to Supabase Staging
        run: |
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase db push --include-seed
          if [ -d "supabase/functions" ]; then
            supabase functions deploy
          fi

  # ========================================
  # DÉPLOIEMENT PRODUCTION
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, test-database]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://${{ secrets.SUPABASE_PROJECT_ID }}.supabase.co
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli

      - name: Deploy to Supabase Production
        run: |
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase db push --include-seed=false  # Pas de seed en prod
          if [ -d "supabase/functions" ]; then
            supabase functions deploy
          fi