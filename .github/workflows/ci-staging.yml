name: Supabase CI ‚Äì DB tests (staging)

on:
  push:
    branches: [staging, main]           # adapte si besoin
  workflow_dispatch:

env:
  SUPABASE_PROJECT_REF: lojjhatxyaxxbxiqbuwp   # ID du projet Supabase

jobs:
  db-tests-staging:
    name: Run DB tests on staging
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN:  ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD:   ${{ secrets.SUPABASE_DB_PASSWORD_STAGING }}

    steps:
    # 1. R√©cup√©ration du d√©p√¥t
    - uses: actions/checkout@v4

    # 2. Installation CLI Supabase
    - uses: supabase/setup-cli@v1
      with: { version: latest }

    # 3. Link projet cloud (pas de prompt : --password + --yes)
    - name: Link Supabase project
      run: |
        supabase link \
          --project-ref "$SUPABASE_PROJECT_REF" \
          --password     "$SUPABASE_DB_PASSWORD" \
          --yes

    # 4. Push des migrations + seed vers STAGING
    - name: Push DB schema to staging
      run: supabase db push --linked --yes

    # 5. R√©solution IPv4 et export DB_URL
    - name: Export DB_URL (IPv4 only)
      run: |
        IP=$(dig +short A "db.${SUPABASE_PROJECT_REF}.supabase.co" | head -1)
        echo "DB_URL=postgres://postgres:${SUPABASE_DB_PASSWORD}@${IP}:5432/postgres?sslmode=require" >> "$GITHUB_ENV"

    # 6. Client psql
    - name: Install PostgreSQL client
      run: sudo apt-get update && sudo apt-get install -y postgresql-client


      
    # 7. D√©bogage + tests DB
    - name: Debug & run DB tests
      run: |
        set -euo pipefail
        echo "üñ®Ô∏è  Variables d'environnement re√ßues :"
        echo "  DB_URL        = $DB_URL"
        echo "  SUPABASE_PWD  = ${SUPABASE_DB_PASSWORD:0:4}********"
        echo

        # 1) Export DATABASE_URL dans le shell courant
        export DATABASE_URL="$DB_URL"
        echo "DATABASE_URL    = $DATABASE_URL"
        echo

        # 2) D√©coupe l'URL pour afficher host / port
        host=$(echo "$DATABASE_URL" | sed -E 's|.*@([^:/]+)(:([0-9]+))?/.*|\1|')
        port=$(echo "$DATABASE_URL" | sed -E 's|.*:([0-9]+)/.*|\1|')
        echo "Host r√©solu     = $host"
        echo "Port            = $port"
        echo

        # 3) V√©rifie la r√©solution DNS
        echo "üîé  dig +short $host"
        dig +short "$host" || true
        echo

        # 4) Teste l'ouverture de socket TCP  (‚âà nc -vz)
        echo "üîå  nc -vz $host $port"
        nc -vz "$host" "$port" || { echo '‚ùå  Port injoignable'; exit 1; }
        echo

        # 5) Essai psql simple : affichage version
        echo "‚ö°  psql -c 'SELECT version();'"
        psql "$DATABASE_URL" -c 'SELECT version();' || { echo '‚ùå  Connexion psql impossible'; exit 1; }
        echo

        # 6) Si tout est OK, lance les scripts r√©els
        echo "üöÄ  Scripts de test DB"
        bash supabase/tests/db/scripts/test_db_profiles_structure.sh
        bash supabase/tests/db/scripts/test_db_profiles_full.sh
